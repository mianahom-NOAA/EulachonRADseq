---
title: "VCF Visuals and Preliminary Analysis"
author: Mia Nahom
date: 2025-03-13
format: 
  html:
      df-print: paged
      embed-resources: true
editor: visual
---

```{r}
#| output: false
library(ggplot2)
library(tidyverse)
library(SeqArray)
library(dplyr)
library(SNPRelate)
library(ggrepel)
```
## Preliminary Analysis
### Read in files
```{r}
freq <- read.table("../v1/out.frq", header=TRUE, row.names = NULL)
countfreq <- read.table("../v1/out.frq.count",header=TRUE, row.names = NULL)
individualdepth <- read.table("../v1/out.idepth",header=TRUE, row.names = NULL)
individualmissing <- read.table("../v1/out.imiss",header=TRUE, row.names = NULL) 
sitedepth <- read.table("../v1/out.ldepth",header=TRUE, row.names = NULL) 
sitemeandepth <- read.table("../v1/out.ldepth.mean",header=TRUE, row.names = NULL)
missingsite <- read.table("../v1/out.lmiss",header=TRUE, row.names = NULL)
sitequal <- read.table("../v1/out.lqual",header=TRUE, row.names = NULL)
```
### Look at tables
```{r}
individualdepth
```
```{r}
individualmissing
```
```{r}
sitedepth
```
```{r}
sitemeandepth
```
```{r}
missingsite
```
```{r}
sitequal
```
### Site depth by position
```{r}
ggplot(sitedepth, aes(x=POS,y=SUM_DEPTH)) +
  geom_point(size=0.2) 
```
### Missingnes by individuals
```{r}
ggplot(individualmissing, aes(x=F_MISS)) + geom_histogram(binwidth=0.01,color="black", fill="skyblue1")
indmissing_2 <- individualmissing
indmissing_2[c('individual', 'location')] <- str_split_fixed(indmissing_2$INDV, '_', 2)
ggplot(indmissing_2, aes(x=F_MISS,fill=location)) + geom_histogram(binwidth=0.01,color="black")
```
### Individual depth
```{r}
ggplot(individualdepth, aes(x=MEAN_DEPTH)) + geom_histogram(binwidth=5,color="black", fill="skyblue1")
inddepth_2 <- individualdepth
inddepth_2[c('individual', 'location')] <- str_split_fixed(inddepth_2$INDV, '_', 2)
ggplot(inddepth_2, aes(fill=location,x=MEAN_DEPTH)) + geom_histogram(binwidth=5,color="black")
ggplot(inddepth_2, aes(fill=location,x=N_SITES)) + geom_histogram(binwidth=10000,color="black")
```
### Missingness by site
```{r}
ggplot(missingsite, aes(x=F_MISS)) + geom_histogram(binwidth=0.05,color="black", fill="skyblue1")
```

Create a quick meta data:
```{r}
meta <- indmissing_2[c(1,6,7)]
colnames(meta)[3] <-"location_kit"
meta[c('location', 'kit')] <- str_split_fixed(meta$location_kit, '_', 2)
meta <- meta %>% mutate_all(na_if,"")
meta
```

## Filtering analysis - following this tutorial:
https://marineomics.github.io/RADseq.html#Evaluate_potential_sources_of_error
```{r}
filename = "populations.snps" 
filename.gds = paste0("../populations/", paste0(filename, ".gds"))
filename.vcf = paste0("../populations/", paste0(filename, ".vcf"))
SeqArray::seqVCF2GDS(vcf.fn = filename.vcf, out.fn = filename.gds, storage.option="ZIP_RA")
```


```{r}
gdsin = SeqArray::seqOpen(filename.gds)
print(paste0("The number of SAMPLES in data: ", length(c(SeqArray::seqGetData(gdsin, "sample.id")))))
```
```{r}
print(paste0("The number of SNPs in data: ",  length(c(SeqArray::seqGetData(gdsin, "variant.id")))))
```
```{r}
print("Per variant: ")
summary(m1 <- SeqArray::seqMissing(gdsin, per.variant=TRUE))
```

```{r}
print("Per sample: ")
summary(m2 <- SeqArray::seqMissing(gdsin, per.variant=FALSE))
```
```{r}
samples <- SeqArray::seqGetData(gdsin, "sample.id")
sampleframe <- cbind(samples,m2)[order(-m2),] %>% as.data.frame()
sampleframe
```
### PCA 
```{r}
sample.ids = seqGetData(gdsin, "sample.id")
snpset <- SNPRelate::snpgdsLDpruning(gdsin, ld.threshold=0.2, autosome.only = F, start.pos="random", num.thread=1, remove.monosnp = T, sample.id = sample.ids)  
snpset.id <- unlist(unname(snpset))
pca.out = SNPRelate::snpgdsPCA(autosome.only = F, gdsin, num.thread=2, remove.monosnp = T, maf = 0.05,
                               snp.id=snpset.id,
                               sample.id = sample.ids)
eig = pca.out$eigenval[!is.na(pca.out$eigenval)]
barplot(100*eig/sum(eig), main="PCA Eigenvalues")
```
```{r}
#PLOT PCA
#PC1 v PC2 colored by collection location
all(sample.ids==meta$INDV)
print(
  as.data.frame(pca.out$eigenvect) %>%
      tibble::add_column(., location =  meta$location) %>%
      ggplot(., aes(x=V1, y=V2, color = location)) + 
      geom_point(size=2) +
      stat_ellipse(level = 0.95, size = 1) +
      geom_hline(yintercept = 0) +
      geom_vline(xintercept = 0) +
      theme_bw() +
      xlab(paste0("PC1 [",paste0(round(eig[1], 2)), "%]")) +
      ylab(paste0("PC2 [",paste0(round(eig[2], 2)), "%]")) +
      ggtitle("PCA Colored by Collection Location")
)


print(
  as.data.frame(pca.out$eigenvect) %>%
      tibble::add_column(., INDV =  meta$INDV,location=meta$location) %>%
      ggplot(., aes(x=V1, y=V2,color=location)) + 
      geom_point(size=1,position="jitter") +
      geom_hline(yintercept = 0) +
      geom_vline(xintercept = 0) +
      theme_bw() +
      xlab(paste0("PC1 [",paste0(round(eig[1], 2)), "%]")) +
      ylab(paste0("PC2 [",paste0(round(eig[2], 2)), "%]")) +
      ggtitle("PCA Colored by Collection Location")
)



print(
  as.data.frame(pca.out$eigenvect) %>%
      tibble::add_column(., location =  meta$location) %>%
      ggplot(., aes(x=V1, y=V2, label = location)) +
      geom_text(size =3) +
      geom_hline(yintercept = 0) +
      geom_vline(xintercept = 0) +
      theme_bw() +      
      geom_label_repel() +
      xlab(paste0("PC1 [",paste0(round(eig[1], 2)), "%]")) +
      ylab(paste0("PC2 [",paste0(round(eig[2], 2)), "%]")) +
      ggtitle("PCA with Labels")
)
```

### Re-do PCA with some filtering

```{r}
bad_samples = sampleframe[sampleframe$m2 > 0.5, "samples"]
keep = sample.ids[which(!sample.ids %in% bad_samples)]
keep <- keep[!grepl("old", keep)]
```

```{r}
snpset <- SNPRelate::snpgdsLDpruning(gdsin, ld.threshold=0.2, autosome.only = F, start.pos="random", num.thread=1, remove.monosnp = T, sample.id = keep)  
snpset.id <- unlist(unname(snpset))
# PCA only on SNPs with a minor allele freq greater than 5%
pca.out = SNPRelate::snpgdsPCA(autosome.only = F, 
                               gdsin, num.thread=2, 
                               remove.monosnp = T, 
                               maf = 0.05,
                               missing.rate= 0.7,
                               snp.id=snpset.id,
                               sample.id = keep) # filtering for pruned SNPs
```
```{r}
eig = pca.out$eigenval[!is.na(pca.out$eigenval)]
barplot(100*eig/sum(eig), main="PCA Eigenvalues")
```
```{r}
meta_keep <- meta[meta$INDV %in% keep,]
all(keep==meta_keep$INDV)
```
```{r}
print(
  as.data.frame(pca.out$eigenvect) %>%
      tibble::add_column(., Loc =  meta_keep$location) %>%
      ggplot(., aes(x=V1, y=V2, color = Loc)) + 
      geom_point(size=2) +
      stat_ellipse(level = 0.95, size = 1) +
      geom_hline(yintercept = 0) +
      geom_vline(xintercept = 0) +
      theme_bw() +
      xlab(paste0("PC1 [",paste0(round(eig[1], 2)), "%]")) +
      ylab(paste0("PC2 [",paste0(round(eig[2], 2)), "%]")) +
      ggtitle("PCA Colored by Collection Location")
)
```
```{r}
as.data.frame(pca.out$eigenvect) %>%
      tibble::add_column(., ID =  meta_keep$INDV) %>%
      select(ID, everything()) 
```



```{r}
SnpLoad <- snpgdsPCASNPLoading(pca.out, gdsin)
```

```{r}
names(SnpLoad)
```
```{r}
dim(SnpLoad$snploading)
```









